
(symbol-name 'abc)
(defun every-equal (x y sx sy)
  (format t "eq:~3A eql:~3A equal:~3A equalp:~3A  (~A ~A) ~%" (eq x y) (eql x y) (equal x y) (equalp x y) sx sy))

(every-equal 'a 'b ''a ''b)
(every-equal 'a 'a ''a ''a)
(every-equal 3 3 '3 '3)
(every-equal 3 3.0 '3 '3.0)
(every-equal 3.0 3.0 '3.0 '3.0)
(every-equal #c(3 -4) #c(3 -4) '#c(3 -4) '#c(3 -4))
(every-equal #c(3 -4.0) #c(3 -4) '#c(3 -4.0) '#c(3 -4))
(every-equal (cons 'a 'b) (cons 'a 'c) `(cons 'a 'b) `(cons 'a 'c))
(every-equal (cons 'a 'b) (cons 'a 'b) `(cons 'a 'b) `(cons 'a 'b))
(every-equal '(a . b) '(a . b) '(a . b) '(a . b))
(defvar x (cons 'a 'b))
(every-equal x x `(defvar x (cons 'a 'b)) `(defvar x (cons 'a 'b)))
(setf x '(a . b))
(every-equal x x `(setf x '(a . b)) `(setf x '(a . b)))
(every-equal #\A #\A '#\A '#\A)
(every-equal "Foo" "Foo" '"Foo" '"Foo")
(every-equal "Foo" (copy-seq "Foo") '"Foo" '(copy-seq "Foo"))
(every-equal "FOO" "foo" '"FOO" '"foo")
